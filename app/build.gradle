plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.github.triplet.play'
    id 'com.google.firebase.appdistribution'
    id 'com.google.gms.google-services'
    id 'org.sonarqube'
    id 'io.gitlab.arturbosch.detekt'
    id "org.jmailen.kotlinter"
}
def keystorePropertiesFile = rootProject.file("app/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
apply from: ("${getRootProject().rootDir}/versions.gradle")
android {
    bundle {
        storeArchive {
            enable = false
        }
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    namespace 'com.gdsdevtec.chat'
    compileSdk Integer.valueOf("$rootProject.ext.compileSdk")

    defaultConfig {
        applicationId "com.gdsdevtec.chat"
        minSdk Integer.valueOf("$rootProject.ext.minSdk")
        targetSdk Integer.valueOf("$rootProject.ext.targetSdk")
        versionCode Integer.valueOf("$rootProject.ext.versionCode")
        versionName "$rootProject.ext.versionName"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "BASE_TESTE", '"TESTE"'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            firebaseAppDistribution {
                appId = System.getenv("APP_CHAT_ID_FIREBASE") ?: appIdFirebaseAppChat
                artifactType = "APK"
                releaseNotesFile = "app/releasenotes.txt"
                groups = "Testers"
                serviceCredentialsFile = System.getenv("FIREBASE_CREDENCIAL_FILE_APP_CHAT") ?: "firebase_service_distribuition.json"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "$rootProject.ext.jvmTarget"
    }
    sonarqube {
        properties {
            property "sonar.projectKey", "gdsdesenvolvimento-admin_chat"
            property "sonar.organization", "gdsdesenvolvimento-admin"
            property "sonar.host.url", "https://sonarcloud.io"
        }
    }
//    sonarqube {
//        properties {
//            property "sonar.projectName", "Chat"
//            property "sonar.projectKey", "Chat"
//            property "sonar.host.url", "http://localhost:9000"
//            property "sonar.language", "kotlin"
//            property "sonar.sources", "D:\\AndroidProjects\\Kotlin\\Chat\\app\\src\\main"
//            property "sonar.login", "admin"
//            property "sonar.password", "G@404trt"
//        }
//    }
}
play {
    serviceAccountCredentials.set(file(System.getenv("SERVICE_ACCOUNT_PLAY_CONSOLE_APP_CHAT")) ?: file("service_account_play_console.json"))
}
dependencies {

    implementation "androidx.core:core-ktx:$rootProject.ext.core_ktx"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appcompat"
    implementation "com.google.android.material:material:$rootProject.ext.material"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintlayout"
    testImplementation "junit:junit:$rootProject.ext.testImplementation_junit"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.androidTestImplementation_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.androidTestImplementation_espresso_core"
}